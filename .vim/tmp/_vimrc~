set nocompatible
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction


" set fileformats for compatibility
set fileformats=dos,unix
" set fileformat for default format
set fileformat=dos
" always enable status line
set laststatus=2
" change status line color based on mode
if version >= 700
au InsertEnter * hi StatusLine term=reverse ctermbg=5 gui=undercurl guisp=Magenta
au InsertLeave * hi StatusLine term=reverse ctermfg=0 ctermbg=2 gui=bold,reverse
endif
"put swp files and ~ files into /.vim/temp
"to figure outr windows location without spaces, 
"go to \C. cmd dir \x
"then see that 'program files (x86)' has 
"shortform 'PROGRA~2'
set backupdir=C:\\Temp
set directory=C:\\Temp
"remaps ; to : for easier commands during normal and insert phase
nnoremap ; :
inoremap ; :
"terminal title will be what buffer you are working in
set title
"auto open windon on make
autocmd QuickFixCmdPost [^l]* nested copen
autocmd QuickFixCmdPost    l* nested lopen

"setup pathogen and plugins
call pathogen#infect()

"setup plugins
map <F2> :NERDTreeToggle<CR>
au FileType python compiler pylint

" python stuff
" tab width = 4 spaces
set tabstop=4
" indent width = 4
set shiftwidth=4
"indent rounded to next full shift width
set shiftround
"delete multiple spaces like it was a single tab
set softtabstop=4
" expand tabs to spaces
set expandtab
"auto-indent code blocks
set autoindent
"show line numbers
set number
" set code folding (press za to open/close)
set foldmethod=indent
set foldlevel=10
"show row and column
set ruler
"syntax highlighting on
syntax on
" not wrap lines since python lines shouldn't go past 80 chars
" set wrap!
" show tabs as >----
set list
set listchars=tab:>-
" highlight tabs; needs to be before color scheme is set
au ColorScheme * highlight BadTab ctermbg=red guibg=red
" define what badtab is for every buffer window
au BufWinEnter * match BadTab /\t/
colorscheme blackboard


